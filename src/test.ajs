// function fromJSON(proto, json) {
//   // throw new Error('Not implemented');
//   console.log(JSON.parse(json));
//   let r = JSON.parse(json);
//   return Object.setPrototypeOf(JSON.parse(json), proto); //Object.create(proto, { r });
// }

//console.log(angleBetweenClockHands(10, 20));

class Selector {
  element(value) {
    if (this.element1) {
      throw new Error('Element, id and pseudo-element should not occur more then one time inside the selector');
    }
    if (this.id1) {
      throw new Error('Selector parts should be arranged in the following order: element, id, class, attribute, pseudo-class, pseudo-element');
    }
    this.element1 = value;
    return this;
  }

  id(value) {
    if (this.class1 || this.pseudoElement1) {
      throw new Error('Selector parts should be arranged in the following order: element, id, class, attribute, pseudo-class, pseudo-element');
    }
    this.id1 = `#${value}`;
    return this;
  }

  class(value) {
    if (this.attr1) {
      throw new Error('Selector parts should be arranged in the following order: element, id, class, attribute, pseudo-class, pseudo-element');
    }
    if (!this.class1) {
      this.class1 = `.${value}`;
    } else {
      this.class1 = `${this.class1}.${value}`;
    }
    return this;
  }

  attr(value) {
    if (this.pseudoClass1) {
      throw new Error('Selector parts should be arranged in the following order: element, id, class, attribute, pseudo-class, pseudo-element');
    }
    this.attr1 = `[${value}]`;
    return this;
  }

  pseudoClass(value) {
    if (this.pseudoElement1) {
      throw new Error('Selector parts should be arranged in the following order: element, id, class, attribute, pseudo-class, pseudo-element');
    }
    if (!this.pseudoClass1) {
      this.pseudoClass1 = `:${value}`;
    } else {
      this.pseudoClass1 = `${this.pseudoClass1}:${value}`;
    }
    return this;
  }

  pseudoElement(value) {
    if (this.pseudoElement1) {
      throw new Error('Element, id and pseudo-element should not occur more then one time inside the selector');
    }
    this.pseudoElement1 = `::${value}`;
    return this;
  }

  stringify() {
    const retStr = Object.values(JSON.parse(JSON.stringify(this))).join('');
    return retStr;
  }
}

const cssSelectorBuilder = {
  element(value) {
    const selector = new Selector();
    selector.element(value);
    return selector;
  },

  id(value) {
    const selector = new Selector();
    selector.id(value);
    return selector;
  },
  class(value) {
    if (!this.class1) {
      const selector = new Selector();
      selector.class(value);
      this.class1 = selector;
      return selector;
    }
    return this.class1;
  },
  attr(value) {
    if (!this.attr1) {
      const selector = new Selector();
      selector.attr(value);
      this.attr1 = selector;
      return selector;
    }
    return this.attr1.attr();
  },

  pseudoClass(value) {
    if (!this.pseudoClass1) {
      const selector = new Selector();
      selector.pseudoClass(value);
      this.pseudoClass1 = selector;
      return selector;
    }
    return this.pseudoClass1.pseudoClass();
  },

  pseudoElement(value) {
    if (!this.pseudoElement1) {
      const selector = new Selector();
      selector.pseudoElement(value);
      this.pseudoElement1 = selector;
      return selector;
    }
    return this.pseudoElement1.pseudoElement();
  },

  combine(selector1, combinator, selector2) {
    this.combo = `${selector1.stringify()} ${combinator} ${selector2.stringify()}`;
    return this;
  },
  stringify() {
    return this.combo;
  },
};

const builder = cssSelectorBuilder;

//console.log(builder.id('main').class('container').class('editable').stringify());
//  => '#main.container.editable'
//console.log(builder.element('a').attr('href$=".png"').pseudoClass('focus').stringify());
builder.pseudoElement('after').pseudoClass('valid')
console.log(builder.element('input').pseudoClass('focus').pseudoClass('invalid').stringify());
//'.container.nav-bar.navbar-inverted'

//  => 'a[href$=".png"]:focus'
//  builder.combine(
//       builder.element('div').id('main').class('container').class('draggable'),
//       '+',
//       builder.combine(
//           builder.element('table').id('data'),
//           '~',

console.log(builder.combine(
  builder.element('div').id('main').class('container').class('draggable'),
  '+',
  builder.combine(
    builder.element('table').id('data'),
    '~',
    builder.combine(
      builder.element('tr').pseudoClass('nth-of-type(even)'),
      ' ',
      builder.element('td').pseudoClass('nth-of-type(even)'),
    ),
  ),
).stringify())
//'div#main.container.draggable + table#data ~ tr:nth-of-type(even)   td:nth-of-type(even)'